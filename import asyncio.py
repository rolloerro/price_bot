import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ‚ö†Ô∏è –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
TOKEN = "7564134625:AAEzOcBSyFcK41PqMj4FCRWA0nLBekbL_70"

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def kb_home():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="home")]])

def kb_main():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üò∞ –ù–∞—á–∞–ª–æ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data="now")],
        [InlineKeyboardButton("ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", callback_data="breathing_menu")],
        [InlineKeyboardButton("üéØ –£—Å–ø–æ–∫–æ–µ–Ω–∏–µ 5-4-3-2-1", callback_data="grounding")],
        [InlineKeyboardButton("üìû SOS / –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="sos")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ß—Ç–æ —Å–æ –º–Ω–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", callback_data="info")],
        [InlineKeyboardButton("‚ùó –ö–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Å–∫–æ—Ä—É—é", callback_data="when_call")]
    ])

def kb_stop():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø –º–µ—Ç—Ä–æ–Ω–æ–º", callback_data="metronome_stop")]])

# ---------- –°—Ç–∞—Ä—Ç ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É, –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å –ø–∞–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞.\n"
        "–¢—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø—Ä–æ–π–¥—ë—Ç. –Ø —Ä—è–¥–æ–º.\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ üëá"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=kb_main())
    else:
        await update.callback_query.edit_message_text(text, reply_markup=kb_main())

# ---------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç—Ä–æ–Ω–æ–º ----------
async def run_metronome(context: ContextTypes.DEFAULT_TYPE, chat_id: int,
                        title: str, phases: list[tuple[str, int]],
                        cycles: int = 4):
    """
    phases: —Å–ø–∏—Å–æ–∫ —Ñ–∞–∑ [(–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–µ–∫—É–Ω–¥—ã), ...]
    cycles: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
    """
    # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    msg = await context.bot.send_message(chat_id, f"‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç: {title}\n–ì–æ—Ç–æ–≤–∏–º—Å—è‚Ä¶", reply_markup=kb_stop())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Å–∫ –≤ user_data, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    task = asyncio.current_task()
    context.user_data["metronome_task"] = task
    try:
        for c in range(1, cycles + 1):
            for (label, secs) in phases:
                # –ø–æ —Å–µ–∫—É–Ω–¥–µ —à–∞–≥–∞–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                for s in range(1, secs + 1):
                    bar = "‚Ä¢" * s + " " * (secs - s)
                    txt = (
                        f"{title}\n"
                        f"–¶–∏–∫–ª {c}/{cycles}\n"
                        f"{label}: {s}/{secs} —Å–µ–∫\n"
                        f"[{bar}]"
                    )
                    await msg.edit_text(txt, reply_markup=kb_stop())
                    await asyncio.sleep(1)
        await msg.edit_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {title}\n–î—ã—à–∏ —Å–ø–æ–∫–æ–π–Ω–æ.", reply_markup=kb_home())
    except asyncio.CancelledError:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –°—Ç–æ–ø
        try:
            await msg.edit_text(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {title}", reply_markup=kb_home())
        except Exception:
            pass
        raise
    finally:
        # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞—Å–∫
        context.user_data.pop("metronome_task", None)

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "home":
        await start(update, context)
        return

    if data == "now":
        txt = (
            "üò∞ *–ü–∞–Ω–∏–∫–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å*\n\n"
            "1) –°–∫–∞–∂–∏ —Å–µ–±–µ: _¬´–Ø –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø–∞–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞. –û–Ω–∞ –ø—Ä–æ–π–¥—ë—Ç¬ª_.\n"
            "2) –õ–∞–¥–æ–Ω—å –Ω–∞ –∂–∏–≤–æ—Ç. –ü–æ—á—É–≤—Å—Ç–≤—É–π –¥—ã—Ö–∞–Ω–∏–µ.\n"
            "3) 3 —Ü–∏–∫–ª–∞:\n"
            "   ‚Ä¢ –í–¥–æ—Ö –Ω–æ—Å–æ–º ‚Äî 4 —Å–µ–∫\n"
            "   ‚Ä¢ –ü–∞—É–∑–∞ ‚Äî 2 —Å–µ–∫\n"
            "   ‚Ä¢ –í—ã–¥–æ—Ö —á–µ—Ä–µ–∑ –≥—É–±—ã ‚Äî 6 —Å–µ–∫\n\n"
            "–î–∞–ª—å—à–µ –æ—Ç–∫—Ä–æ–π ¬´ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏¬ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "breathing_menu":
        await q.edit_message_text(
            "ü´Å –í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óºÔ∏è –ö–≤–∞–¥—Ä–∞—Ç 4-4-4-4", callback_data="breath_square"),
                 InlineKeyboardButton("‚ñ∂Ô∏è –ú–µ—Ç—Ä–æ–Ω–æ–º 4-4-4-4", callback_data="metro_square")],
                [InlineKeyboardButton("4-7-8 (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ)", callback_data="breath_478"),
                 InlineKeyboardButton("‚ñ∂Ô∏è –ú–µ—Ç—Ä–æ–Ω–æ–º 4-7-8", callback_data="metro_478")],
                [InlineKeyboardButton("üå¨Ô∏è –ì—É–±–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ", callback_data="breath_pursed")],
                [InlineKeyboardButton("üßò –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –º—ã—à—Ü", callback_data="pmr")],
                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="home")]
            ])
        )
        return

    if data == "breath_square":
        txt = (
            "‚óºÔ∏è *–î—ã—Ö–∞–Ω–∏–µ ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª 4-4-4-4*\n\n"
            "–í–¥–æ—Ö 4 ‚Üí –ü–∞—É–∑–∞ 4 ‚Üí –í—ã–¥–æ—Ö 4 ‚Üí –ü–∞—É–∑–∞ 4.\n"
            "3‚Äì5 —Ü–∏–∫–ª–æ–≤. –î—ã—à–∏ –∂–∏–≤–æ—Ç–æ–º, –ø–ª–µ—á–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã.\n\n"
            "‚ú® –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å—á–∏—Ç–∞–π ¬´—Ä–∞–∑-–¥–≤–∞-—Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ¬ª."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "breath_478":
        txt = (
            "üåô *–î—ã—Ö–∞–Ω–∏–µ 4-7-8 (–∑–∞–º–µ–¥–ª—è–µ—Ç –ø—É–ª—å—Å)*\n\n"
            "–í–¥–æ—Ö –Ω–æ—Å–æ–º ‚Äî 4 —Å–µ–∫ ‚Üí –ó–∞–¥–µ—Ä–∂–∫–∞ ‚Äî 7 —Å–µ–∫ ‚Üí –í—ã–¥–æ—Ö —á–µ—Ä–µ–∑ –≥—É–±—ã ‚Äî 8 —Å–µ–∫.\n"
            "–°–¥–µ–ª–∞–π 4 —Ü–∏–∫–ª–∞. –ï—Å–ª–∏ —Ç—è–∂–µ–ª–æ ‚Äî —É–º–µ–Ω—å—à–∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3-5-6), —Å–æ—Ö—Ä–∞–Ω–∏–≤ _—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ_."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "breath_pursed":
        txt = (
            "üå¨Ô∏è *–ì—É–±–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ*\n\n"
            "1) –í–¥–æ—Ö –Ω–æ—Å–æ–º 2‚Äì3 —Å–µ–∫\n"
            "2) –°–æ–º–∫–Ω–∏ –≥—É–±—ã ¬´—Ç—Ä—É–±–æ—á–∫–æ–π¬ª –∏ –≤—ã–¥—ã—Ö–∞–π –≤–¥–≤–æ–µ –¥–æ–ª—å—à–µ\n"
            "3) –ü–æ–≤—Ç–æ—Ä–∏ 5‚Äì10 —Ü–∏–∫–ª–æ–≤ ‚Äî –æ—â—É—â–µ–Ω–∏–µ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –≤–æ–∑–¥—É—Ö–∞ —Å–Ω–∏–∑–∏—Ç—Å—è."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "pmr":
        txt = (
            "üßò *–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –º—ã—à–µ—á–Ω–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ*\n\n"
            "–ù–∞–ø—Ä—è–≥–∏ –Ω–∞ 5 —Å–µ–∫ –∏ —Ä–∞—Å—Å–ª–∞–±—å –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n"
            "‚Ä¢ –°—Ç–æ–ø—ã ‚Üí –≥–æ–ª–µ–Ω–∏ ‚Üí –±—ë–¥—Ä–∞\n"
            "‚Ä¢ –ñ–∏–≤–æ—Ç ‚Üí —Å–ø–∏–Ω–∞ ‚Üí –ø–ª–µ—á–∏\n"
            "‚Ä¢ –ö–∏—Å—Ç–∏ ‚Üí –ø—Ä–µ–¥–ø–ª–µ—á—å—è ‚Üí –ª–∏—Ü–æ\n\n"
            "–û—Ç–º–µ—á–∞–π —Ä–∞–∑–Ω–∏—Ü—É ‚Äî —Ç—Ä–µ–≤–æ–≥–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "grounding":
        txt = (
            "üéØ *–ú–µ—Ç–æ–¥ 5-4-3-2-1*\n\n"
            "5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–∏–¥–∏—à—å üëÄ\n"
            "4 –∑–≤—É–∫–∞ —Å–ª—ã—à–∏—à—å üëÇ\n"
            "3 –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å ‚úã\n"
            "2 –∑–∞–ø–∞—Ö–∞ üëÉ\n"
            "1 –≤–∫—É—Å üëÖ\n\n"
            "–î—ã—à–∏ —Ä–æ–≤–Ω–æ. –¢—Ä–µ–≤–æ–≥–∞ —Å–ø–∞–¥–∞–µ—Ç –≤–æ–ª–Ω–∞–º–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏ —Å–ø–∞–¥."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "when_call":
        txt = (
            "‚ùó *–ö–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—Ç—å —Å–∫–æ—Ä—É—é (103/112)*\n\n"
            "‚Äî –î–∞–≤—è—â–∞—è –±–æ–ª—å –≤ –≥—Ä—É–¥–∏ >5‚Äì10 –º–∏–Ω, —Å –∏—Ä—Ä–∞–¥–∏–∞—Ü–∏–µ–π –≤ —Ä—É–∫—É/—á–µ–ª—é—Å—Ç—å/—Å–ø–∏–Ω—É\n"
            "‚Äî –•—Ä–∏–ø—ã/—Å–≤–∏—Å—Ç, –ø–æ—Å–∏–Ω–µ–Ω–∏–µ –≥—É–±, –æ–±–º–æ—Ä–æ–∫, —Å—É–¥–æ—Ä–æ–≥–∏\n"
            "‚Äî –¢—Ä–∞–≤–º–∞, –±—Ä–µ–¥, –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
            "–ù–µ —É–≤–µ—Ä–µ–Ω(–∞)? –õ—É—á—à–µ –≤—ã–∑–≤–∞—Ç—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "info":
        txt = (
            "‚ÑπÔ∏è *–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–∞–Ω–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–µ?*\n\n"
            "–û—Ä–≥–∞–Ω–∏–∑–º –æ—à–∏–±–æ—á–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç ¬´—Ç—Ä–µ–≤–æ–≥—É¬ª.\n"
            "–£—á–∞—â–∞–µ—Ç—Å—è –¥—ã—Ö–∞–Ω–∏–µ ‚Üí –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ, ¬´–∫–æ–º –≤ –≥–æ—Ä–ª–µ¬ª, –ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ _–≥–∏–ø–µ—Ä–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è_.\n"
            "–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ ‚Äî –Ω–µ —É–¥—É—à—å–µ. –¶–µ–ª—å ‚Äî –∑–∞–º–µ–¥–ª–∏—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Ç–µ–ª–æ."
        )
        await q.edit_message_text(txt, parse_mode="Markdown", reply_markup=kb_home())
        return

    if data == "sos":
        geo_kb = ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
             [KeyboardButton("üè† –í –º–µ–Ω—é")]],
            resize_keyboard=True, one_time_keyboard=True
        )
        await q.edit_message_text("–û–∂–∏–¥–∞—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é‚Ä¶ (—Å–º–æ—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ)", reply_markup=kb_home())
        await q.message.chat.send_message(
            "üìû *SOS / –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è*\n\n"
            "–®–∞–±–ª–æ–Ω –¥–ª—è –±–ª–∏–∑–∫–æ–≥–æ:\n"
            "¬´–£ –º–µ–Ω—è –ø–∞–Ω–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞. –ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –í–æ—Ç –º–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–∏–∂–µ.¬ª",
            parse_mode="Markdown",
            reply_markup=geo_kb
        )
        return

    # ---- –ú–µ—Ç—Ä–æ–Ω–æ–º—ã ----
    if data == "metro_478":
        if context.user_data.get("metronome_task"):
            await q.edit_message_text("‚è≥ –ú–µ—Ç—Ä–æ–Ω–æ–º —É–∂–µ –∏–¥—ë—Ç. –ù–∞–∂–º–∏ ¬´‚èπÔ∏è –°—Ç–æ–ø¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.", reply_markup=kb_stop())
            return
        phases = [("–í–¥–æ—Ö", 4), ("–ó–∞–¥–µ—Ä–∂–∫–∞", 7), ("–í—ã–¥–æ—Ö", 8)]
        context.application.create_task(
            run_metronome(context, q.message.chat_id, "–î—ã—Ö–∞–Ω–∏–µ 4-7-8", phases, cycles=4)
        )
        await q.edit_message_text("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –º–µ—Ç—Ä–æ–Ω–æ–º 4-7-8‚Ä¶", reply_markup=kb_stop())
        return

    if data == "metro_square":
        if context.user_data.get("metronome_task"):
            await q.edit_message_text("‚è≥ –ú–µ—Ç—Ä–æ–Ω–æ–º —É–∂–µ –∏–¥—ë—Ç. –ù–∞–∂–º–∏ ¬´‚èπÔ∏è –°—Ç–æ–ø¬ª, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.", reply_markup=kb_stop())
            return
        phases = [("–í–¥–æ—Ö", 4), ("–ü–∞—É–∑–∞", 4), ("–í—ã–¥–æ—Ö", 4), ("–ü–∞—É–∑–∞", 4)]
        context.application.create_task(
            run_metronome(context, q.message.chat_id, "–î—ã—Ö–∞–Ω–∏–µ ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª 4-4-4-4", phases, cycles=4)
        )
        await q.edit_message_text("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –º–µ—Ç—Ä–æ–Ω–æ–º ¬´–ö–≤–∞–¥—Ä–∞—Ç¬ª‚Ä¶", reply_markup=kb_stop())
        return

    if data == "metronome_stop":
        task = context.user_data.get("metronome_task")
        if task and not task.done():
            task.cancel()
            await q.edit_message_text("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–µ—Ç—Ä–æ–Ω–æ–º‚Ä¶", reply_markup=kb_home())
        else:
            await q.edit_message_text("–ú–µ—Ç—Ä–æ–Ω–æ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=kb_home())
        return

# ---------- –°–æ–æ–±—â–µ–Ω–∏—è: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ ¬´–í –º–µ–Ω—é¬ª ----------
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üè† –í –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
        return

    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        url = f"https://maps.google.com/?q={lat},{lon}"
        txt = (
            "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}\n"
            f"üîó {url}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –±–ª–∏–∑–∫–æ–º—É –∏–ª–∏ –ø—Ä–æ–¥–∏–∫—Ç—É–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É 103/112."
        )
        await update.message.reply_text(txt)
        await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=kb_main())
        return

# ---------- MAIN ----------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.LOCATION | filters.TEXT, on_message))

    print("üöÄ –ü–∞–Ω–∏–∫-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
